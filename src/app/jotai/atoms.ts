import { atom } from "jotai";
import { atomWithStorage } from "jotai/utils";

type Packages = {
  name: string;
  status: boolean;
};

type FlagsType = {
  [key: string]: string;
};

type PackagesType = "up-to" | "above" | "select" | "skip";

export const buildTypeAtom = atom<PackagesType>("up-to");
export const packageNamesAtom = atom<Packages[]>([]);
export const buildLogsAtom = atom<string[]>([]);
export const autowareFolderPathAtom = atomWithStorage<string | null>(
  "autowareFolderPathBuildGUI",
  null
);
export const colconBuildTypeAtom = atom<{
  label: string;
  value: string;
}>({
  label: "",
  value: "",
});

export const editedFlagsAtom = atomWithStorage<FlagsType>(
  "editedFlagsBuildGUI",
  {}
);

export const minimalSetupPlanningSimulatorAtom = atom([
  "bag_time_manager_rviz_plugin",
  "gnss_poser",
  "surround_obstacle_checker",
  "autoware_auto_perception_rviz_plugin",
  "topic_state_monitor",
  "tier4_adapi_rviz_plugin",
  "tier4_simulated_clock_rviz_plugin",
  "traffic_light_multi_camera_fusion",
  "tier4_localization_rviz_plugin",
  "shape_estimation",
  "trajectory_follower_base",
  "obstacle_stop_planner",
  "traffic_light_occlusion_predictor",
  "emergency_handler",
  "behavior_velocity_planner",
  "behavior_path_planner",
  "mission_planner",
  "external_cmd_selector",
  "tier4_target_object_type_rviz_plugin",
  "tier4_datetime_rviz_plugin",
  "external_cmd_converter",
  "trajectory_follower_node",
  "freespace_planner",
  "tier4_control_rviz_plugin",
  "map_loader",
  "operation_mode_transition_manager",
  "tier4_automatic_goal_rviz_plugin",
  "autoware_launch",
  "sample_sensor_kit_description",
  "obstacle_avoidance_planner",
  "tier4_state_rviz_plugin",
  "vehicle_cmd_gate",
  "tier4_calibration_rviz_plugin",
  "lane_departure_checker",
  "dummy_diag_publisher",
  "sample_vehicle_description",
  "sample_sensor_kit_launch",
  "simple_planning_simulator",
  "lanelet2_extension",
  "planning_evaluator",
  "multi_object_tracker",
  "dummy_perception_publisher",
  "mrm_emergency_stop_operator",
  "rtc_auto_mode_manager",
  "tier4_traffic_light_rviz_plugin",
  "pointcloud_to_laserscan",
  "traffic_light_visualization",
  "crosswalk_traffic_light_estimator",
  "glog_component",
  "pose_initializer",
  "tier4_debug_rviz_plugin",
  "component_interface_tools",
  "obstacle_velocity_limiter",
  "camera_description",
  "mrm_comfortable_stop_operator",
  "scenario_selector",
  "planning_validator",
  "imu_description",
  "rtc_interface",
  "rtc_manager_rviz_plugin",
  "map_projection_loader",
  "motion_velocity_smoother",
  "individual_params",
  "vls_description",
  "default_ad_api",
  "map_tf_generator",
  "lanelet2_map_preprocessor",
  "tier4_planning_rviz_plugin",
  "system_error_monitor",
  "sample_vehicle_launch",
  "tier4_vehicle_rviz_plugin",
  "tier4_perception_rviz_plugin",
  "map_based_prediction",
  "tier4_screen_capture_rviz_plugin",
  "traffic_light_arbiter",
  "costmap_generator",
  "rtc_replayer",
  "path_smoother",
]);

export const minimalSetupLoggingSimulatorAtom = atom([
  "autoware_auto_perception_rviz_plugin",
  "bag_time_manager_rviz_plugin",
  "rtc_manager_rviz_plugin",
  "tier4_adapi_rviz_plugin",
  "tier4_automatic_goal_rviz_plugin",
  "tier4_calibration_rviz_plugin",
  "tier4_control_rviz_plugin",
  "tier4_datetime_rviz_plugin",
  "tier4_debug_rviz_plugin",
  "tier4_localization_rviz_plugin",
  "tier4_perception_rviz_plugin",
  "tier4_planning_rviz_plugin",
  "tier4_screen_capture_rviz_plugin",
  "tier4_simulated_clock_rviz_plugin",
  "tier4_state_rviz_plugin",
  "tier4_target_object_type_rviz_plugin",
  "tier4_traffic_light_rviz_plugin",
  "tier4_vehicle_rviz_plugin",
  "autoware_launch",
  "vls_description",
  "individual_params",
  "camera_description",
  "pose_initializer",
  "ekf_localizer",
  "imu_description",
  "component_interface_tools",
  "shape_estimation",
  "shift_decider",
  "localization_error_monitor",
  "glog_component",
  "system_monitor",
  "euclidean_cluster",
  "trajectory_follower_base",
  "system_error_monitor",
  "map_based_prediction",
  "vehicle_velocity_converter",
  "velodyne_monitor",
  "behavior_velocity_planner",
  "map_loader",
  "external_velocity_limit_selector",
  "behavior_path_planner",
  "scenario_selector",
  "traffic_light_classifier",
  "obstacle_stop_planner",
  "sample_sensor_kit_description",
  "object_merger",
  "ndt_scan_matcher",
  "detected_object_feature_remover",
  "multi_object_tracker",
  "operation_mode_transition_manager",
  "emergency_handler",
  "traffic_light_multi_camera_fusion",
  "default_ad_api",
  "traffic_light_fine_detector",
  "lanelet2_extension",
  "trajectory_follower_node",
  "occupancy_grid_map_outlier_filter",
  "imu_corrector",
  "vehicle_cmd_gate",
  "surround_obstacle_checker",
  "stop_filter",
  "lanelet2_map_preprocessor",
  "mrm_comfortable_stop_operator",
  "velodyne_description",
  "traffic_light_map_based_detector",
  "detection_by_tracker",
  "costmap_generator",
  "sample_vehicle_description",
  "external_cmd_selector",
  "mission_planner",
  "map_tf_generator",
  "planning_evaluator",
  "traffic_light_ssd_fine_detector",
  "traffic_light_visualization",
  "freespace_planner",
  "sample_vehicle_launch",
  "mrm_emergency_stop_operator",
  "traffic_light_occlusion_predictor",
  "obstacle_velocity_limiter",
  "rtc_auto_mode_manager",
  "obstacle_avoidance_planner",
  "lane_departure_checker",
  "automatic_pose_initializer",
  "traffic_light_arbiter",
  "motion_velocity_smoother",
  "component_state_monitor",
  "sample_sensor_kit_launch",
  "gnss_poser",
  "planning_validator",
  "image_transport_decompressor",
  "external_cmd_converter",
  "topic_state_monitor",
  "lidar_centerpoint",
  "twist2accel",
  "control_validator",
  "crosswalk_traffic_light_estimator",
  "gyro_odometer",
]);

export const minimalSetupAWSimAtom = atom([
  "autoware_launch",
  "awsim_sensor_kit_description",
  "awsim_sensor_kit_launch",
  "behavior_path_planner",
  "behavior_velocity_planner",
  "camera_description",
  "common_awsim_sensor_launch",
  "common_sensor_launch",
  "component_interface_tools",
  "component_state_monitor",
  "costmap_generator",
  "default_ad_api",
  "detected_object_feature_remover",
  "detection_by_tracker",
  "emergency_handler",
  "euclidean_cluster",
  "external_cmd_converter",
  "external_cmd_selector",
  "external_velocity_limit_selector",
  "freespace_planner",
  "gyro_odometer",
  "imu_corrector",
  "imu_description",
  "individual_params",
  "lane_departure_checker",
  "lanelet2_extension",
  "lanelet2_map_preprocessor",
  "map_based_prediction",
  "map_loader",
  "mission_planner",
  "motion_velocity_smoother",
  "mrm_comfortable_stop_operator",
  "mrm_emergency_stop_operator",
  "multi_object_tracker",
  "object_merger",
  "obstacle_avoidance_planner",
  "obstacle_stop_planner",
  "obstacle_velocity_limiter",
  "occupancy_grid_map_outlier_filter",
  "operation_mode_transition_manager",
  "planning_evaluator",
  "planning_validator",
  "rtc_auto_mode_manager",
  "rtc_interface",
  "rtc_manager_rviz_plugin",
  "rtc_replayer",
  "sample_sensor_kit_description",
  "sample_sensor_kit_launch",
  "sample_vehicle_description",
  "sample_vehicle_launch",
  "scenario_selector",
  "shape_estimation",
  "shift_decider",
  "stop_filter",
  "surround_obstacle_checker",
  "system_error_monitor",
  "tier4_automatic_goal_rviz_plugin",
  "tier4_autoware_api_launch",
  "tier4_calibration_rviz_plugin",
  "tier4_control_rviz_plugin",
  "tier4_datetime_rviz_plugin",
  "tier4_debug_rviz_plugin",
  "tier4_localization_rviz_plugin",
  "tier4_perception_rviz_plugin",
  "tier4_planning_rviz_plugin",
  "tier4_screen_capture_rviz_plugin",
  "tier4_simulated_clock_rviz_plugin",
  "tier4_state_rviz_plugin",
  "tier4_traffic_light_rviz_plugin",
  "tier4_vehicle_rviz_plugin",
  "topic_state_monitor",
  "traffic_light_map_based_detector",
  "traffic_light_visualization",
  "trajectory_follower_base",
  "trajectory_follower_node",
  "twist2accel",
  "vehicle_cmd_gate",
  "vehicle_velocity_converter",
  "vls_description",
  "localization_error_monitor",
]);

export const calibrationToolsPackagesAtom = atom([
  "apriltag_msgs",
  "apriltag_ros",
  "calibration_adapter",
  "camera_calibration",
  "depth_image_proc",
  "deviation_estimator",
  "deviation_evaluator",
  "estimator_utils",
  "extrinsic_calibration_client",
  "extrinsic_calibration_manager",
  "extrinsic_dummy_calibrator",
  "extrinsic_ground_plane_calibrator",
  "extrinsic_interactive_calibrator",
  "extrinsic_lidar_to_lidar_2d_calibrator",
  "extrinsic_manual_calibrator",
  "extrinsic_map_based_calibrator",
  "extrinsic_mapping_based_calibrator",
  "extrinsic_reflector_based_calibrator",
  "extrinsic_tag_based_base_calibrator",
  "extrinsic_tag_based_calibrator",
  "image_pipeline",
  "image_proc",
  "image_publisher",
  "image_rotate",
  "image_view",
  "intrinsic_camera_calibration",
  "intrinsic_camera_calibrator",
  "lidartag",
  "lidartag_msgs",
  "parameter_estimator",
  "pitch_checker",
  "point_cloud_accumulator",
  "ros2_numpy",
  "stereo_image_proc",
  "stop_accel_evaluator",
  "tier4_calibration_msgs",
  "tier4_calibration_pcl_extensions",
  "tier4_tag_utils",
  "time_delay_estimator",
  "tunable_static_tf_broadcaster",
  "vehicle_cmd_analyzer",
]);

export const colconFlags = [
  {
    label: "--build-base",
    placeholder: "Enter build base path",
    multipleValues: false,
  },
  {
    label: "--install-base",
    placeholder: "Enter install base path",
    multipleValues: false,
  },
  { label: "--merge-install", placeholder: "", multipleValues: false },
  {
    label: "--install-layout",
    placeholder: "Enter layout (merged/isolated)",
    multipleValues: false,
  },
  //   { label: "--symlink-install", placeholder: "", multipleValues: false },
  { label: "--cmake-args", placeholder: "ARG [ARG â€¦]", multipleValues: true },
  { label: "--cmake-clean-cache", placeholder: "", multipleValues: false },
  { label: "--cmake-clean-first", placeholder: "", multipleValues: false },
  { label: "--cmake-force-configure", placeholder: "", multipleValues: false },
  {
    label: "--cmake-target",
    placeholder: "Enter CMake target",
    multipleValues: false,
  },
  {
    label: "--cmake-target-skip-unavailable",
    placeholder: "",
    multipleValues: false,
  },
  {
    label: "--catkin-cmake-args",
    placeholder: "ARG [ARG â€¦]",
    multipleValues: true,
  },
  {
    label: "--ament-cmake-args",
    placeholder: "ARG [ARG â€¦]",
    multipleValues: true,
  },
  {
    label: "--catkin-skip-building-tests",
    placeholder: "",
    multipleValues: false,
  },
  {
    label: "--catkin-skip-building-install",
    placeholder: "",
    multipleValues: false,
  },
  {
    label: "--event-handlers",
    placeholder: "NAME [NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--executor",
    placeholder: "Enter executor (sequential/parallel)",
    multipleValues: false,
  },
  {
    label: "--parallel-workers",
    placeholder: "Enter number of workers",
    multipleValues: false,
  },
  { label: "--paths", placeholder: "PATH [PATH â€¦]", multipleValues: true },
  { label: "--base-paths", placeholder: "PATH [PATH â€¦]", multipleValues: true },
  { label: "--metas", placeholder: "PATH [PATH â€¦]", multipleValues: true },
  { label: "--ignore-user-meta", placeholder: "", multipleValues: false },
  {
    label: "--packages-ignore",
    placeholder: "PKG_NAME [PKG_NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--packages-ignore-regex",
    placeholder: "Enter regex pattern",
    multipleValues: false,
  },
  {
    label: "--packages-above",
    placeholder: "PKG_NAME [PKG_NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--packages-above-and-dependencies",
    placeholder: "PKG_NAME [PKG_NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--packages-above-depth",
    placeholder: "Enter depth and package names",
    multipleValues: true,
  },
  {
    label: "--packages-select-by-dep",
    placeholder: "PKG_NAME [PKG_NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--packages-skip-by-dep",
    placeholder: "PKG_NAME [PKG_NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--packages-skip-up-to",
    placeholder: "PKG_NAME [PKG_NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--packages-select-build-failed",
    placeholder: "",
    multipleValues: false,
  },
  {
    label: "--packages-skip-build-finished",
    placeholder: "",
    multipleValues: false,
  },
  {
    label: "--packages-select-test-failures",
    placeholder: "",
    multipleValues: false,
  },
  {
    label: "--packages-skip-test-passed",
    placeholder: "",
    multipleValues: false,
  },
  {
    label: "--packages-select",
    placeholder: "PKG_NAME [PKG_NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--packages-skip",
    placeholder: "PKG_NAME [PKG_NAME â€¦]",
    multipleValues: true,
  },
  {
    label: "--packages-select-regex",
    placeholder: "Enter regex pattern",
    multipleValues: false,
  },
  {
    label: "--packages-skip-regex",
    placeholder: "Enter regex pattern",
    multipleValues: false,
  },
  {
    label: "--packages-start",
    placeholder: "Enter package name",
    multipleValues: false,
  },
  {
    label: "--packages-end",
    placeholder: "Enter package name",
    multipleValues: false,
  },
  {
    label: "--mixin-files",
    placeholder: "PATH [PATH â€¦]",
    multipleValues: true,
  },
  { label: "--mixin", placeholder: "NAME [NAME â€¦]", multipleValues: true },
];
